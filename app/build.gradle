plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlinx-serialization'

def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


def getVersionTag = { variant ->
    def stdout
    try {
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--match", "${variant}/*", "--tag"
            standardOutput = stdout
        }
        def longTag = stdout.toString().trim()

        return longTag.substring(longTag.indexOf('/') + 1, longTag.indexOf('-'))
    } catch (ignored) {
        return "0.0.1";
    }
}

def getVersionCode = { tag ->
    def parts = tag.tokenize('.')
//    if(parts.size() != 3 || parts[1].length() > 2 || parts[2].length() > 2) {
//        throw new RuntimeException("Invalid version tag ${tag}, format x.y.z expected.")
//    }
    if(parts[1].length() == 1) {
        parts[1] = "0" + parts[1]
    }
    if(parts[2].length() == 1) {
        parts[2] = "0" + parts[2]
    }
    return Integer.parseInt(parts[0] + parts[1] + parts[2])
}

def getVersionName = { tag ->
    return tag
}



android {
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }


compileSdkVersion 32
buildToolsVersion "30.0.3"

def versionPropsFile = file('version.properties')

Properties versionProps = new Properties()

if (!versionPropsFile.exists()) {
    versionProps['VERSION_MAJOR'] = "0"
    versionProps['VERSION_MINOR'] = "0"
    versionProps['VERSION_BUILD'] = "0"
    versionProps['VERSION_CODE'] = "0"
    versionProps.store(versionPropsFile.newWriter(), null)
}

if (versionPropsFile.canRead()) {

    versionProps.load(new FileInputStream(versionPropsFile))// из файла в переменную

    def runTasks = gradle.startParameter.taskNames
    def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
    def versionMinor = versionProps['VERSION_MINOR'].toInteger()
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    def versionCod = versionProps['VERSION_CODE'].toInteger()

    def isNew = false

    print(runTasks)
    if (':app:bundleRelease' in getVersionTag) {
        //Сборка для всех
        versionMinor++
        versionCod++
        isNew = true
    }
    if (':app:bundleReleaseTest' in runTasks) {
        //Сборка для тестирующих курьеров
        versionBuild++
        versionCod++
        isNew = true
    }

    versionProps['VERSION_MAJOR'] = versionMajor.toString()
    versionProps['VERSION_MINOR'] = versionMinor.toString()
    versionProps['VERSION_BUILD'] = versionBuild.toString()
    versionProps['VERSION_CODE'] = versionCod.toString()
    if (isNew) {
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    defaultConfig {
        multiDexEnabled true
        applicationId "ru.wb.go"
        minSdkVersion 23
        targetSdkVersion 32
        versionCode versionCod
        versionName versionMajor + "." + versionMinor + "." + versionBuild

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86_64", "x86"
        }

    }

} else {
    throw new GradleException("Could not read version.properties!")
}

kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

buildTypes {
    release {
//            debuggable true
//            minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        manifestPlaceholders = [appName: "WB Go"]
        signingConfig signingConfigs.release
        matchingFallbacks = ['release']
        ndk {
            debugSymbolLevel 'FULL'
        }
    }
    releaseTest {
        manifestPlaceholders = [appName: "WB Go"]
        //FIXME необходмио внедрить тестовую информацию
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        matchingFallbacks = ['release']
        //signingConfig signingConfigs.release
    }
    debug {
//            minifyEnabled true
        applicationIdSuffix ".debug"
        manifestPlaceholders = [appName: "WB Go debug"]
        signingConfig signingConfigs.debug
    }

    debugQA {
        initWith debug
        debuggable true
        signingConfig signingConfigs.debug
    }

}

task outputApk {
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName = "${variant.name}_${variant.versionName}_${variant.versionCode}.apk"
            outputFileName = fileName
        }
    }
}

compileOptions {
    coreLibraryDesugaringEnabled true

    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
}
kotlinOptions {
    jvmTarget = '1.8'
}

buildFeatures {
    dataBinding = true
    viewBinding true
}
lint {
    abortOnError false
    warningsAsErrors true
}

applicationVariants.all { variant ->
    def versionTag = getVersionTag(variant.buildType.name)
    def myVersionCode = getVersionCode(versionTag)
  // def myVersionName = getVersionName(versionTag)

//    println variant.name + "[" + {$myVersionCode++} + ", " + myVersionName + "]"

  // variant.mergedFlavor.versionName = myVersionName;

        variant.outputs.each { output ->
            output.versionCodeOverride = myVersionCode
        }
    }

}



dependencies {

    //LeakCanary для утечек памяти
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.fragment:fragment-ktx:1.5.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.0-alpha02'

    implementation 'com.google.android.material:material:1.6.1'
    implementation 'com.google.android.gms:play-services-location:20.0.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.room:room-runtime:2.4.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation files('../app/libs/commons-net-3.3-ftp.jar')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2"

    //ViewModel
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.0'

    //Koin main features for Android (Scope,ViewModel ...)
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-android-compat:$koin_version"
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
    implementation "io.insert-koin:koin-androidx-compose:$koin_version"

    //room
    kapt "androidx.room:room-compiler:$version_room"
    kapt "android.arch.persistence.room:compiler:1.1.1"
    implementation "android.arch.persistence.room:runtime:1.1.1"

    //annotationProcessor "android.arch.persistence.room:compiler:1.1.1"
    annotationProcessor 'androidx.room:room-compiler:2.4.2'

    //coroutine suspend fun for room
    implementation "androidx.room:room-ktx:2.4.2"

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.0"

    //delegates
    api 'com.hannesdorfmann:adapterdelegates3:3.0.1'

    //pref
    implementation 'androidx.preference:preference-ktx:1.2.0'

    //date tame
    implementation 'joda-time:joda-time:2.9.9'

    //scanner
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.6'

    //pdf
    implementation 'com.github.mhiew:android-pdf-viewer:3.2.0-beta.1'

    //map
    implementation 'org.osmdroid:osmdroid-android:6.1.11'

    //firebase
    implementation platform('com.google.firebase:firebase-bom:29.0.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    //coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"

//    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC"

}